// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  // verifyToken       String
  // verifyTokenExpiry DateTime
  createdAt DateTime @default(now())

  // ---------------relations-------------------

  category      Category[]
  subCat        SubCategory[]
  product       Product[]
  prodImage     ProductImages[]
  unit          Unit[]
  typeOfProduct TypeOfProduct[]
}

model Category {
  id        Int           @id @default(autoincrement())
  catName   String
  imgUrl    String
  userId    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  public_id String
  subCat    SubCategory[]
  createdAt DateTime      @default(now())
}

model SubCategory {
  id         Int      @id @default(autoincrement())
  subCatName String
  catId      Int
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [catId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Product {
  id        String          @id @default(uuid())
  prodName  String
  category  String
  subCat    String?
  mrp       Int
  price     Int
  stocks    Int
  unit      String
  dimension String
  type      String
  desc      String
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  prodImage ProductImages[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  imgUrl    String
  public_id String
  userId    Int
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Unit {
  id        Int      @id @default(autoincrement())
  unitName  String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model TypeOfProduct {
  id          Int      @id @default(autoincrement())
  productType String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}
